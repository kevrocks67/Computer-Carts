<Manager>:
    id: screen_manager

    screen_zero: screen_zero
    screen_one: screen_one
    screen_two: screen_two
    screen_three: screen_three
    screen_four: screen_four

    MainScreen:
        id: screen_zero
        name: 'Screen0'
        manager: screen_manager

    AddEntryScreen:
        id: screen_one
        name: 'Screen1'
        manager: screen_manager

    EditEntryScreen:
        id: screen_two
        name: 'Screen2'
        manager: screen_manager

    SettingsScreen:
        id: screen_three
        name: 'Screen3'
        manager: screen_manager

    ListScreen:
        id: screen_four
        name: 'Screen4'
        manager: screen_manager

[CustomListItem@BoxLayout]:
    sql_data_list_view: sql_data_list_id
    id: sql_data_list_id
    size_hint_y: .8
    height: .4
    ListItemButton:
        text: ctx.text
        is_selected: ctx.is_selected

RecycleView:
    id: rv
    scroll_type: ['bars', 'content']
    scroll_wheel_distance: dp(114)
    bar_width: dp(10)
    viewclass: 'SelectableLabel'
    SelectableRecycleBoxLayout:
        default_size: None, dp(56)
        default_size_hint: 1, None
        size_hint_y: .8
        height: self.minimum_height
        orientation: 'vertical'
        multiselect: True
        RecycleBoxLayout:
            default_size: None, dp(56)
            default_size_hint: 1, None
            size_hint_y: None
            height: self.minimum_height
            orientation: 'vertical'
            spacing: dp(2)


<cartDB>:
    cart_list_text_input: cart_list
    cart_num_text_input: cart_num
    cart_stat_text_input: cart_stat
    cart_type_text_input: cart_type
    cart_CRM_text_input: cart_CRM
    cart_CPd_text_input: cart_CPd
    cart_FRM_text_input: cart_FRM
    cart_FPd_text_input: cart_FPd

<NotificationTime>:
    Button:
        text: 'My first Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item1')
    Label:
        text: 'Unselectable item'
        size_hint_y: None
        height: 44
    Button:
        text: 'My second Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item2')


<AddEntryScreen>:
    ActionBar:
        pos_hint: {'top':1}
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'New Entry'
                with_previous: False
                on_release: root.manager.transition = SlideTransition(direction="left")
                on_release: root.manager.current = 'main'
            ActionOverflow:
            ActionGroup:
                ActionButton:
                    text: 'Save Entry'
                    on_release: root.add_button(cart_stat.text, cart_crm.text, cart_cpd.text, cart_frm.text, cart_fpd.text)
                    on_release: root.manager.transition = SlideTransition(direction="left")
                    on_release: root.manager.current = 'main'

    FloatLayout:
        TextInput:
            id: cart_stat
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint:{'x': .55, 'y': .82}

        Label:
            text: "Cart Number:"
            pos_hint:{'x': -.4, 'y': .36}
        Label:
            text: "Status:"
            pos_hint:{'x': 0, 'y': .36}

        Label:
            text: "Current Room:"
            pos_hint:{'x': -.4, 'y': .25}
        TextInput:
            id: cart_crm
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint:{'x': .18, 'y': .72}
        Label:
            text: "Time Req:"
            pos_hint:{'x': 0, 'y': .25}
        TextInput:
            id: cart_cpd
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .55, 'y': .72}
        Label:
            text: "Future Room Need:"
            pos_hint: {'x': -.4, 'y': .15}
        TextInput:
            id: cart_frm
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .18, 'y': .62}
        Label:
            text: "Future Time Need"
            pos_hint: {'x': 0, 'y': .15}
        TextInput:
            id: cart_fpd
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .60, 'y': .62}
        Label:
            text: "Additional Comments"
            pos_hint: {'x': -0.05, 'y': 0}
        TextInput:
            id: addtl_comments
            font_size: 18
            size_hint: .5, .35
            pos_hint: {'x': .20, 'y': 0.08}

<EditEntryScreen>:
    ActionBar:
        pos_hint: {'top':1}
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'Edit Entry'
                with_previous: False
                on_release: root.manager.transition = SlideTransition(direction="left")
                on_release: root.manager.current = 'main'
            ActionOverflow:
            ActionGroup:
                ActionButton:
                    text: 'Save Entry'
                    on_release: root.manager.transition = SlideTransition(direction="left")
                    on_release: root.manager.current = 'main'

    FloatLayout:
        Label:
            text: "Cart Number:"
            pos_hint:{'x': -.4, 'y': .36}
        Label:
            text: "Status:"
            pos_hint:{'x': 0, 'y': .36}
        TextInput:
            id: cart_stat
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint:{'x': .55, 'y': .82}
        Label:
            text: "Current Room:"
            pos_hint:{'x': -.4, 'y': .25}
        TextInput:
            id: cart_CRM
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint:{'x': .18, 'y': .72}
            readonly: True
        Label:
            text: "Time Req:"
            pos_hint:{'x': 0, 'y': .25}
        TextInput:
            id: cart_CPd
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .55, 'y': .72}
            readonly: True
        Label:
            text: "Future Room Need:"
            pos_hint: {'x': -.4, 'y': .15}
        TextInput:
            id: cart_FRM
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .18, 'y': .62}
        Label:
            text: "Future Time Need"
            pos_hint: {'x': 0, 'y': .15}
        TextInput:
            id: cart_FPd
            multiline: False
            font_size: 25
            size_hint: .2, .07
            pos_hint: {'x': .60, 'y': .62}
        Label:
            text: "Additional Comments"
            pos_hint: {'x': -0.05, 'y': 0}
        TextInput:
            id: addtl_comments
            font_size: 18
            size_hint: .5, .35
            pos_hint: {'x': .20, 'y': 0.08}

# background
canvas.before:
    Rectangle:
        pos: self.pos
        size: self.size
        source: 'C:\\Users\\Test For Bootpass\\Pictures\\lion-304487_640.png'
##################################Python Stuff

#Factory.register('SelectableView', cls=SelectableView)
#Factory.register('ListItemButton', cls=ListItemButton)


class Manager(ScreenManager):
    screen_zero = ObjectProperty(None)
    screen_one = ObjectProperty(None)
    screen_two = ObjectProperty(None)
    screen_three = ObjectProperty(None)
    screen_four = ObjectProperty(None)


sql_data_list_view = ObjectProperty()

def list(self, *args):
    categories = sorted(sql_data.keys())
    list_item_args_converter = \
        lambda row_index, rec: {'text': rec['name'],
                                'font_size': "16sp",
                                'size_hint_y': None,
                                'height': 50}

    # Here we create a dict adapter with 1..100 integer strings as
    # sorted_keys, and integers_dict from fixtures as data, passing our
    # CompositeListItem kv template for the list item view. Then we
    # create a list view using this adapter. args_converter above converts
    # dict attributes to ctx attributes.
    sql_data_dict_adapter = DictAdapter(sorted_keys=categories,
                                        data=sql_data,
                                        args_converter=list_item_args_converter,
                                        selection_mode='single',
                                        allow_empty_selection=True,
                                        cls=cartListButton)

    sql_data_list_view = \
        ListView(adapter=sql_data_dict_adapter,
                 size_hint=(1, .8))

    self.add_widget(sql_data_list_view)


class CartListButton(ListItemButton):
    pass


def display_binary
     q = '''
           SELECT * FROM ComputerCarts
            '''


# def display_binary(self, cur):
            #self.fill(self.db_data(cur))


LabelLayout = BoxLayout()
    layout = BoxLayout(orientation='vertical')
    layout.add_widget(LabelLayout)
    LabelLayout.size_hint_y = 0.4
    SQLHeaderLabel = ['Id', 'Cart Status', 'Current Room', 'Time Req', 'Future Room', 'Future Time']
    for label in SQLHeaderLabel:
        labelText = StringProperty('')
        # labelText = '[ref=' + label.lower() + ']' + label + '[/ref]'
        # top_label = Label(text=label, markup=True)
        # widget.size_hint_y = 0.08
        # LabelLayout.size_hint_y = .8
        # label = Label(text=labelText, size_hint_y=0.2, font_size="16sp")

        sql = Label(text=label, size_hint_y=0.2, font_size="16sp")
        LabelLayout.add_widget(sql)


class NotificationTime(BoxLayout):
    pass


class CartDB(BoxLayout):
    cart_list_text_input = ObjectProperty()
    cart_num_text_input = ObjectProperty()
    cart_stat_text_input = ObjectProperty()
    cart_type_text_input = ObjectProperty()
    cart_CRM_text_input = ObjectProperty()
    cart_CPd_text_input = ObjectProperty()
    cart_FRM_text_input = ObjectProperty()
    cart_FPd_text_input = ObjectProperty()
    addtl_comments_text_input = ObjectProperty()

class AddEntryScreen(Screen):
    def add_button(self, cart_stat, cart_crm, cart_cpd, cart_frm, cart_fpd):
        main_screen = MainScreen()
        main_screen.add_cart(cart_stat, cart_crm, cart_cpd, cart_frm, cart_fpd)

class EditEntryScreen(Screen):
    def edit_button(self):
        pass

 sm.add_widget(AddEntryScreen(name='add'))
 sm.add_widget(EditEntryScreen(name='edit'))

 ############################################################### Login Screen with lists

users = []
salts = []
hashes = []

def register(self):
    global users
    global salts
    global hashes
    # user = input('Enter desired username: ')
    # password = input('Enter desired password: ')

    users.append(user)
    salts.append(salt)
    hashes.append(salted_hash)

def check_auth(self):
    global users
    global salts
    global hashes

    # while True:
    # user = input('Enter username: ')

    # if user in users:
    #     print('Username exists')
    #     index = users.index(user)
    #     # self.ids.inp_username.text = ''
    #     self.ids.inp_password.text = ''
    #     # break
    #     # for retry in range(5):
    #     # password = input('Enter password: ')
    #
    #     salt = salts[index]
    #
    #     salted_pass = password + salt
    #     salted_hash = hashlib.sha512(salted_pass.encode('utf-8')).hexdigest()
    #
    #     stored_hash = hashes[index]
    #
    #     if stored_hash == salted_hash:
    #         print('Login Successful')
    #         self.manager.current = 'main'
    #         # break
    #
    #     else:
    #         print('Your password is incorrect;Attempt:{}/5'.format(retry + 1))
    #         retry = retry + 1
    #         self.ids.inp_password.text = ''
    #
    #         if retry == 5:
    #             print('You have made too many attempts. Try again later!')
    #             print('Would you like to register a new account?')
    #             response = input('Yes or No: ')
    #
    #             if response.lower == 'yes' or 'y':
    #                 print('Starting register function...')
    #                 retry = 0
    #                 self.ids.inp_username.text = ''
    #                 self.register_butt()
    #
    #             elif response.lower == 'no' or 'n':
    #                 print('Thank you for your time. Closing application...')
    #                 sys.exit(1)
    #
    # else:
    #     print('User does not exist')
    #     self.ids.inp_username.text = ''
    #     self.ids.inp_password.text = ''